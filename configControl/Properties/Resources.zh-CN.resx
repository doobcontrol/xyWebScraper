<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="tpOtherSetting" xml:space="preserve">
    <value>其它配置</value>
  </data>
  <data name="tbDelPath" xml:space="preserve">
    <value>删除当前保存路径搜索</value>
  </data>
  <data name="tbAddNext" xml:space="preserve">
    <value>新增一项url搜索</value>
  </data>
  <data name="lbAddAfter" xml:space="preserve">
    <value>在后面添加</value>
  </data>
  <data name="lbStart" xml:space="preserve">
    <value>开始位置</value>
  </data>
  <data name="msg_selectedCount" xml:space="preserve">
    <value>选中数量: </value>
  </data>
  <data name="lbReplace" xml:space="preserve">
    <value>替换项</value>
  </data>
  <data name="tbAddPageConfig" xml:space="preserve">
    <value>新增一个网页模型</value>
  </data>
  <data name="tbDelReplace" xml:space="preserve">
    <value>删除当前替换项</value>
  </data>
  <data name="lbEnd" xml:space="preserve">
    <value>结束位置</value>
  </data>
  <data name="lbAddBefore" xml:space="preserve">
    <value>在前面添加</value>
  </data>
  <data name="cbSearchList" xml:space="preserve">
    <value>返回多个搜索结果</value>
  </data>
  <data name="pathsCb" xml:space="preserve">
    <value>保存路径</value>
  </data>
  <data name="selectFormText_Import" xml:space="preserve">
    <value>把选中的网页模型从文件中导入 - </value>
  </data>
  <data name="selectFormText_Save" xml:space="preserve">
    <value>把选中的网页模型保存到 - </value>
  </data>
  <data name="tpTest" xml:space="preserve">
    <value>测试</value>
  </data>
  <data name="title_save" xml:space="preserve">
    <value>另存为文件</value>
  </data>
  <data name="title_import" xml:space="preserve">
    <value>从文件导入</value>
  </data>
  <data name="fileType_cfg" xml:space="preserve">
    <value>网页模型配置文件</value>
  </data>
  <data name="tbAddReplace" xml:space="preserve">
    <value>新增一个替换项</value>
  </data>
  <data name="tpHtml" xml:space="preserve">
    <value>Html文本</value>
  </data>
  <data name="tpSearchLayers" xml:space="preserve">
    <value>搜索层级</value>
  </data>
  <data name="tbCopyPageConfig" xml:space="preserve">
    <value>拷贝当前网页模型生成新模型</value>
  </data>
  <data name="tbDelNext" xml:space="preserve">
    <value>删除当前url搜索</value>
  </data>
  <data name="tbAddSearchLayer" xml:space="preserve">
    <value>新增一层搜索</value>
  </data>
  <data name="filesCb" xml:space="preserve">
    <value>下载文件</value>
  </data>
  <data name="lbPageConfigID" xml:space="preserve">
    <value>网页模型ID</value>
  </data>
  <data name="lbGetting" xml:space="preserve">
    <value>正在下载...</value>
  </data>
  <data name="tbDelPageConfig" xml:space="preserve">
    <value>删除当前网页模型</value>
  </data>
  <data name="btnGetHtml" xml:space="preserve">
    <value>下载Html文本</value>
  </data>
  <data name="tbDelFile" xml:space="preserve">
    <value>删除当前文件搜索</value>
  </data>
  <data name="nextsCb" xml:space="preserve">
    <value>链接</value>
  </data>
  <data name="btnCancel" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="btnImport" xml:space="preserve">
    <value>导入</value>
  </data>
  <data name="btnSave" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="lbEncoding" xml:space="preserve">
    <value>网页编码</value>
  </data>
  <data name="tbDelSearchLayer" xml:space="preserve">
    <value>删除当前搜索层</value>
  </data>
  <data name="tbAddFile" xml:space="preserve">
    <value>新增一项文件搜索</value>
  </data>
  <data name="tpFinalHandle" xml:space="preserve">
    <value>搜索结果</value>
  </data>
  <data name="tbAddPath" xml:space="preserve">
    <value>新增一项保存路径搜索</value>
  </data>
  <data name="tbShowTest" xml:space="preserve">
    <value>显示/隐藏测试面板</value>
  </data>
  <data name="testMsg_FoundItems" xml:space="preserve">
    <value>找到 {0} 项: </value>
  </data>
  <data name="testMsg_FoundString" xml:space="preserve">
    <value>查找结果: </value>
  </data>
  <data name="testMsg_SearchError" xml:space="preserve">
    <value>搜索错误: </value>
  </data>
  <data name="tbSave" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="tbSaveAs" xml:space="preserve">
    <value>另存为</value>
  </data>
  <data name="tbImport" xml:space="preserve">
    <value>导入</value>
  </data>
  <data name="btnSearch" xml:space="preserve">
    <value>搜索</value>
  </data>
  <data name="cbIsAutoUrl_text" xml:space="preserve">
    <value>由源地址自动增长生成</value>
  </data>
  <data name="lbAutoGrowthPar_text" xml:space="preserve">
    <value>自动增长参数</value>
  </data>
  <data name="lbCheckExist_text" xml:space="preserve">
    <value>增长条件检查</value>
  </data>
</root>