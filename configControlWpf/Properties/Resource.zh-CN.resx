<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ttcbSearchMultiResults" xml:space="preserve">
    <value>按下状态搜索返回多个结果，放开状态搜索返回单个结果</value>
  </data>
  <data name="tbEnd" xml:space="preserve">
    <value>结束</value>
  </data>
  <data name="tbStart" xml:space="preserve">
    <value>开始</value>
  </data>
  <data name="ttBtnAddSl" xml:space="preserve">
    <value>新增一个搜索层</value>
  </data>
  <data name="ttbtnDel" xml:space="preserve">
    <value>删除当前选中的搜索层</value>
  </data>
  <data name="cbIsautogrowthurl" xml:space="preserve">
    <value>由原URL自动增长生成</value>
  </data>
  <data name="tbPageConfigID" xml:space="preserve">
    <value>页面配置名称</value>
  </data>
  <data name="tiSearchLayers" xml:space="preserve">
    <value>搜索层次</value>
  </data>
  <data name="tiFinalHandle" xml:space="preserve">
    <value>其它处理</value>
  </data>
  <data name="tbReplace" xml:space="preserve">
    <value>替换</value>
  </data>
  <data name="tbAddBefore" xml:space="preserve">
    <value>在前面插入</value>
  </data>
  <data name="tbAddAfter" xml:space="preserve">
    <value>在后面增加</value>
  </data>
  <data name="ttbtnAddReplace" xml:space="preserve">
    <value>增加一个替换项</value>
  </data>
  <data name="ttbtnDelReplace" xml:space="preserve">
    <value>删除当前选中的替换项</value>
  </data>
  <data name="tbAutoGrowthPar" xml:space="preserve">
    <value>自动增长参数</value>
  </data>
  <data name="tbCheckExist" xml:space="preserve">
    <value>结束标志</value>
  </data>
  <data name="ttbtnAddSearch" xml:space="preserve">
    <value>新增一个搜索</value>
  </data>
  <data name="ttbtnDelSearch" xml:space="preserve">
    <value>删除当前搜索</value>
  </data>
  <data name="tihSearch" xml:space="preserve">
    <value>搜索</value>
  </data>
  <data name="tbCoding" xml:space="preserve">
    <value>网页编码</value>
  </data>
  <data name="cbpaths" xml:space="preserve">
    <value>保存路径</value>
  </data>
  <data name="cbfiles" xml:space="preserve">
    <value>文件</value>
  </data>
  <data name="cbnexts" xml:space="preserve">
    <value>导航</value>
  </data>
  <data name="ttbtnAddPage" xml:space="preserve">
    <value>新增一个网页配置</value>
  </data>
  <data name="ttbtnDelPage" xml:space="preserve">
    <value>删除当前网页配置</value>
  </data>
  <data name="ttbtnCopyPage" xml:space="preserve">
    <value>拷贝当前网页配置生成新配置</value>
  </data>
  <data name="ttbtnOpen" xml:space="preserve">
    <value>打开配置文件</value>
  </data>
  <data name="ttbtnSave" xml:space="preserve">
    <value>保存配置文件</value>
  </data>
  <data name="ttbtnSaveAs" xml:space="preserve">
    <value>把配置文件另存为...</value>
  </data>
  <data name="ttbtnImport" xml:space="preserve">
    <value>导入配置</value>
  </data>
  <data name="ttbtnTest" xml:space="preserve">
    <value>显示/隐藏测试面板</value>
  </data>
  <data name="tihPageModel" xml:space="preserve">
    <value>网页模型</value>
  </data>
  <data name="fdFileType" xml:space="preserve">
    <value>网页配置文件</value>
  </data>
  <data name="titleSelectPageModelID" xml:space="preserve">
    <value>选择网页配置</value>
  </data>
  <data name="btnOkText" xml:space="preserve">
    <value>确定</value>
  </data>
  <data name="btnCancelText" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="btnGetHtmlText" xml:space="preserve">
    <value>下载网页源码</value>
  </data>
  <data name="tihTest" xml:space="preserve">
    <value>测试</value>
  </data>
  <data name="tihHtmlText" xml:space="preserve">
    <value>网页源码</value>
  </data>
  <data name="btnTestText" xml:space="preserve">
    <value>测试</value>
  </data>
  <data name="testMsgInit" xml:space="preserve">
    <value>请输入（粘贴）网页地址，然后点击‘下载网页源码’按钮</value>
  </data>
  <data name="testMsgTesting" xml:space="preserve">
    <value>测试中...</value>
  </data>
  <data name="testMsgFoundItems" xml:space="preserve">
    <value>搜索到 {0} 项: </value>
  </data>
  <data name="testMsgFoundString" xml:space="preserve">
    <value>搜索到字符串: </value>
  </data>
  <data name="testMsgTestdone" xml:space="preserve">
    <value>完成测试</value>
  </data>
  <data name="testMsgTestfail" xml:space="preserve">
    <value>测试失败</value>
  </data>
  <data name="testMsgTestError" xml:space="preserve">
    <value>测试错误: </value>
  </data>
</root>