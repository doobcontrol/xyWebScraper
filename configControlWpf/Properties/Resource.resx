<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ttcbSearchMultiResults" xml:space="preserve">
    <value>If checked, the search will return multiple results. If unchecked, the search will return only the first result.</value>
  </data>
  <data name="tbEnd" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="tbStart" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="ttBtnAddSl" xml:space="preserve">
    <value>Add a Search layer</value>
  </data>
  <data name="ttbtnDel" xml:space="preserve">
    <value>Delete a search layer</value>
  </data>
  <data name="cbIsautogrowthurl" xml:space="preserve">
    <value>Is auto growth url</value>
  </data>
  <data name="tbPageConfigID" xml:space="preserve">
    <value>Page Config ID</value>
  </data>
  <data name="tiSearchLayers" xml:space="preserve">
    <value>Search Layers</value>
  </data>
  <data name="tiFinalHandle" xml:space="preserve">
    <value>Final Handle</value>
  </data>
  <data name="tbReplace" xml:space="preserve">
    <value>Replace</value>
  </data>
  <data name="tbAddBefore" xml:space="preserve">
    <value>Add Before</value>
  </data>
  <data name="tbAddAfter" xml:space="preserve">
    <value>Add After</value>
  </data>
  <data name="ttbtnAddReplace" xml:space="preserve">
    <value>Add a Replace item</value>
  </data>
  <data name="ttbtnDelReplace" xml:space="preserve">
    <value>Delete current replace item</value>
  </data>
  <data name="tbAutoGrowthPar" xml:space="preserve">
    <value>Auto Growth Par</value>
  </data>
  <data name="tbCheckExist" xml:space="preserve">
    <value>Check Exist</value>
  </data>
  <data name="ttbtnAddSearch" xml:space="preserve">
    <value>Add a Search</value>
  </data>
  <data name="ttbtnDelSearch" xml:space="preserve">
    <value>Del current search</value>
  </data>
  <data name="tihSearch" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="tbCoding" xml:space="preserve">
    <value>Coding</value>
  </data>
  <data name="cbpaths" xml:space="preserve">
    <value>paths</value>
  </data>
  <data name="cbfiles" xml:space="preserve">
    <value>files</value>
  </data>
  <data name="cbnexts" xml:space="preserve">
    <value>navigate</value>
  </data>
  <data name="ttbtnAddPage" xml:space="preserve">
    <value>Add a Page config</value>
  </data>
  <data name="ttbtnDelPage" xml:space="preserve">
    <value>Delete current Page</value>
  </data>
  <data name="ttbtnCopyPage" xml:space="preserve">
    <value>Copy current Page config create a new  config</value>
  </data>
  <data name="ttbtnOpen" xml:space="preserve">
    <value>Open a config file</value>
  </data>
  <data name="ttbtnSave" xml:space="preserve">
    <value>Save config file</value>
  </data>
  <data name="ttbtnSaveAs" xml:space="preserve">
    <value>Save config file As...</value>
  </data>
  <data name="ttbtnImport" xml:space="preserve">
    <value>Import config</value>
  </data>
  <data name="ttbtnTest" xml:space="preserve">
    <value>Toggle show/hide Test panel</value>
  </data>
  <data name="tihPageModel" xml:space="preserve">
    <value>Page Model </value>
  </data>
  <data name="fdFileType" xml:space="preserve">
    <value>page config files</value>
  </data>
  <data name="titleSelectPageModelID" xml:space="preserve">
    <value>Select Page Model</value>
  </data>
  <data name="btnOkText" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="btnCancelText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="btnGetHtmlText" xml:space="preserve">
    <value>Get Html Text</value>
  </data>
  <data name="tihTest" xml:space="preserve">
    <value>Test</value>
  </data>
  <data name="tihHtmlText" xml:space="preserve">
    <value>Html Text</value>
  </data>
  <data name="btnTestText" xml:space="preserve">
    <value>Test</value>
  </data>
  <data name="testMsgInit" xml:space="preserve">
    <value>Input url and click 'Get Html Text' button</value>
  </data>
  <data name="testMsgTesting" xml:space="preserve">
    <value>Testing...</value>
  </data>
  <data name="testMsgFoundItems" xml:space="preserve">
    <value>found  {0} items: </value>
  </data>
  <data name="testMsgFoundString" xml:space="preserve">
    <value>found string: </value>
  </data>
  <data name="testMsgTestdone" xml:space="preserve">
    <value>Test done.</value>
  </data>
  <data name="testMsgTestfail" xml:space="preserve">
    <value>Test fail.</value>
  </data>
  <data name="testMsgTestError" xml:space="preserve">
    <value>test error: </value>
  </data>
</root>